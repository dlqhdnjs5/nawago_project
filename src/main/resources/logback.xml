<?xml version="1.0" encoding="UTF-8"?>
<configuration>
	<property name="LOGS_ABSOLUTE_PATH" value="/var/log/tomcat9/local" />
	
	<!-- <appender name="CONSOLE" class="ch.qos.logback.core.ConsoleAppender">
		<layout class="ch.qos.logback.classic.PatternLayout">
			<pattern>%d{HH:mm:ss.SSS} [%thread] %-4level [%logger.%method:%line]- %msg%n</pattern>
		</layout>
	</appender>   -->
	
	 <!-- 콘솔로 로그를 남기는 설정 -->
	  <appender name="CONSOLE" class="ch.qos.logback.core.ConsoleAppender">
	    <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
	      <charset>UTF-8</charset>
	      <Pattern>[%d{yyyy-MM-dd HH:mm:ss}] [%p] [%t] [%c]%m%n</Pattern>
	    </encoder>
	  </appender>

	<appender name="LOGFILE" class="ch.qos.logback.core.rolling.RollingFileAppender">		
		<file>${LOGS_ABSOLUTE_PATH}/logback.log</file>
		<rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
		<fileNamePattern>${LOGS_ABSOLUTE_PATH}/my-web.%d{yyyy-MM-dd}.log</fileNamePattern>
		<!-- 30일 지난 파일은 삭제한다.  -->
		 <maxHistory>2</maxHistory>
		</rollingPolicy>		
		<encoder>
			<pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} %-4level [%logger.%method:%line] - %msg %n</pattern>
		</encoder> 			
	</appender>



	<logger name="org.apache.commons.dbcp2" level="DEBUG">
		<appender-ref ref="LOGFILE"/>
		<appender-ref ref="CONSOLE" />
	</logger>
	<logger name="java.sql" >
		<level value="INFO"/>
		<level value="ERROR"/>
		<appender-ref ref="CONSOLE" />
		<appender-ref ref="LOGFILE"/>
	</logger>
	<logger name="jdbc.sqlonly" >    <!-- SQL문만을 로그로 남기며, PreparedStatement일 경우 관련된 argument 값으로 대체된 SQL문이 보여진다. -->
		<level value="DEBUG"/>
		<level value="INFO"/>
		<level value="ERROR"/>
		<appender-ref ref="CONSOLE" />
		<appender-ref ref="LOGFILE"/>
	</logger>
	<logger name="jdbc.sqltiming" >    <!-- SQL문과 해당 SQL을 실행시키는데 수행된 시간 정보(milliseconds)를 포함한다. -->
		<level value="DEBUG"/>
		<level value="INFO"/>
		<appender-ref ref="CONSOLE" />
		<appender-ref ref="LOGFILE"/>
	</logger>
	<logger name="jdbc.audit"><!-- ResultSet을 제외한 모든 JDBC 호출 정보를 로그로 남긴다. 많은 양의 로그가 생성되므로 특별히 JDBC 문제를 추적해야 할 필요가 있는 경우를 제외하고는 사용을 권장하지 않는다. -->
		<level value="DEBUG"/>
		<level value="INFO"/>
		<level value="ERROR"/>
		<appender-ref ref="CONSOLE" />
		<appender-ref ref="LOGFILE" />
	</logger>    
	<logger name="jdbc.resultset" level="DEBUG"/> <!-- ResultSet을 포함한 모든 JDBC 호출 정보를 로그로 남기므로 매우 방대한 양의 로그가 생성된다. -->
	
	<logger name="org.springframework" additivity="true" >
		<level value="DEBUG"/>
		<level value="INFO"/>
		<level value="WARN"/>
		<level value="ERROR"/>
		<appender-ref ref="CONSOLE" />
		<appender-ref ref="LOGFILE" />
	</logger>
	
	
    <!-- 	RULES for logging DEBUG < INFO < WARN < ERROR < FATAL.-->
    <logger name="myweb" additivity="true">
        <level value="INFO"/>
        <level value="WARN" />
        <level value="ERROR"/>
        <appender-ref ref="CONSOLE"/>
    </logger>    
    
    <logger name="fileLogger" additivity="true">
        <level value="INFO"/>
        <level value="DEBUG"/>
        <level value="WARN" />
        <level value="ERROR"/>
        <appender-ref ref="LOGFILE"/>
    </logger>    


  	<root>
		<level value="WARN" />
		<level value="ERROR"/>
		<level value="INFO"/>
		<appender-ref ref="CONSOLE" />
	</root>
	
	

</configuration>